interface User {
  id: ID!
  first_name: String!
  last_name: String!
  phone: String!
  kind: String
  active: Boolean!
  ak_access_token: String,
  ak_user_id: String,
  ak_token_refresh_interval_sec: String,
  last_login_timestamp: Int
  created_on_timestamp: Int!
  member_since_timestamp: Int!,
  profilePhotoUrl: String
}

type Admin implements User {
  id: ID!
  first_name: String!
  last_name: String!
  phone: String!
  kind: String
  active: Boolean!
  ak_access_token: String,
  ak_user_id: String,
  ak_token_refresh_interval_sec: String,
  last_login_timestamp: Int
  created_on_timestamp: Int!
  member_since_timestamp: Int!
  roles: [Role!]!
  profilePhotoUrl: String
}

type Gma implements User {
  id: ID!
  first_name: String!
  last_name: String!
  phone: String!
  kind: String
  active: Boolean!
  ak_access_token: String,
  ak_user_id: String,
  ak_token_refresh_interval_sec: String,
  last_login_timestamp: Int
  created_on_timestamp: Int!
  member_since_timestamp: Int!
  availabilities: [Availability!]
  otherAvailability: String
  careAges: [CareAge!]
  careExperiences: [CareExperience!]
  otherCareExperience: String
  careLocations: [CareLocation!]
  careTrainings: [CareTraining!]
  otherCareTraining: String
  city: City!
  demeanors: [Demeanor!]
  otherDemeanor: String
  neighborhood: Neighborhood!
  otherNeighborhood: String
  isAvailableOutsideNeighborhood: Boolean!
  whyCareForKidsText: String!
  additionalInformationText: String!
  profilePhotoUrl: String
}

type Parent implements User {
  id: ID!
  first_name: String!
  last_name: String!
  phone: String!
  kind: String
  active: Boolean!
  ak_access_token: String,
  ak_user_id: String,
  ak_token_refresh_interval_sec: String,
  last_login_timestamp: Int
  created_on_timestamp: Int!
  member_since_timestamp: Int!
  profilePhotoUrl: String
  neighborhood: Neighborhood!
  otherNeighborhood: String
  kids: [Kid!]!
}

type Kid {
  first_name: String!
  birthday: Int!  
}

type UserListResult {
  list: [User!]
  nextToken: String
}

type AKInit {
  appId: ID!
  version: String!
  csrf: String!
}

type AKAuth {
  csrfNonce: String!
  authCode: String!
}

type AKPhone {
  country_prefix: String!
  number: String!
  national_number: String!
}

enum Availability {
  EARLY_MORNING,
  DAYTIME,
  EVENING,
  OVERNIGHT,
  WEEKEND,
  OTHER
}

enum CareAge {
  ZERO_TO_SIX_MONTHS,
  SIX_MONTHS_TO_TWO_YEARS,
  TWO_YEARS_TO_FIVE_YEARS,
  FIVE_YEARS_PLUS
}

enum CareExperience {
  RAISED_KIDS,
  CARED_FOR_GRANDKIDS,
  WORKED_BABYSITTING,
  WORKED_CHILDCARE_CENTER,
  WORKED_SCHOOL,
  OTHER
}

enum CareLocation {
  CHILDS_HOME,
  PROVIDERS_HOME
}

enum CareTraining {
  HEALTH_AND_SAFETY,
  CPR_AND_FIRST_AID,
  PREVENTATIVE_HEALTH,
  CHILDCENTERED_ART,
  OTHER
}

enum City {
  OAKLAND
}

enum Demeanor {
  PATIENT,
  OUTGOING,
  CALM,
  FUNNY,
  RELIABLE,
  SERIOUS,
  ENERGETIC,
  QUIET,
  PLAYFUL,
  LOUD,
  OTHER
}

enum Neighborhood {
  WEST_OAKLAND,
  EAST_OAKLAND,
  CENTRAL_OAKLAND,
  BERKELEY,
  EMERYVILLE,
  PIEDMONT,
  ALBANY,
  ALAMEDA,
  CASTRO_VALLEY,
  NORTH_OAKLAND,
  OTHER
}

enum Role {
  ADMIN
}

type Query {
  accountKitInit: AKInit!
  admins(active: Boolean, limit: Int, nextToken: String): UserListResult
  currentUser: User
  gma(id: ID!): Gma
  gmas(active: Boolean, limit: Int, nextToken: String): UserListResult
  parents(active: Boolean, limit: Int, nextToken: String): UserListResult
}

input AdminInput {
  id: ID
  first_name: String!
  last_name: String!
  phone: String!
  active: Boolean!
  roles: [Role!]!
  profilePhotoUrl: String
}

input GmaInput {
  id: ID
  first_name: String!
  last_name: String!
  phone: String!
  active: Boolean!
  availabilities: [Availability!]
  otherAvailability: String
  careAges: [CareAge!]
  careExperiences: [CareExperience!]
  otherCareExperience: String
  careLocations: [CareLocation!]
  careTrainings: [CareTraining!]
  otherCareTraining: String
  city: City!
  demeanors: [Demeanor!]
  otherDemeanor: String
  neighborhood: Neighborhood!
  otherNeighborhood: String
  isAvailableOutsideNeighborhood: Boolean!
  whyCareForKidsText: String!
  additionalInformationText: String!
  profilePhotoUrl: String
}

input ParentInput {
  id: ID
  first_name: String!
  last_name: String!
  phone: String!
  active: Boolean!
  profilePhotoUrl: String
  neighborhood: Neighborhood!
  otherNeighborhood: String
  kids: [KidInput!]!
}

input KidInput {
  first_name: String!
  birthday: Int!  
}

type Mutation {
  saveAdmin(input: AdminInput!): Admin
  saveGma(input: GmaInput!): Gma
  saveParent(input: ParentInput!): Parent
  accountKitAuth(csrfNonce: String!, authCode: String!): User
}

schema {
  query: Query
  mutation: Mutation
}
